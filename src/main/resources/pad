-------------------------------------------------------------------------------
-- syntactic sugaring

apply-sugar (if .if then .then else .else end-if) (.if ? .then | .else) :- ! #
apply-sugar .t0 .t1
	:- tree (.t0, .left0, .operator, .right0)
	, tree (.t1, .left1, .operator, .right1)
	, !, apply-sugar .left0 .left1, apply-sugar .right0 .right1
#
apply-sugar .node .node #

-------------------------------------------------------------------------------
-- format check

define-signature .sign :- signature-prototype .sign .sign #

check-format MODULE (.rule # .remains) :- check-format RULE .rule, check-format PGM .remains #
check-format MODULE () #

check-format RULE (.head :- .clause) :- check-rule-format .head .clause #
check-format RULE .head :- not (head = ()), check-rule-format .head () #
check-format RULE () #

check-format CLAUSE (.c1, .c2) :- check-format CLAUSE .c1, check-format CLAUSE .c2 #
check-format CLAUSE (.c1; .c2) :- check-format CLAUSE .c1, check-format CLAUSE .c2 #
check-format CLAUSE (.c1 = .c2) :- check-type .type .c1, check-type .type .c2 #

check-rule-format .head .clause
	:- prototype .head .proto
	, retrieve-signature .head .types
	, check-type .types .head
	, check-format CLAUSE .clause
#

signature-prototype .sign .proto :- prototype .sign .proto, map.retrieve (SIGNATURE .sign, .proto) #

check-type %integer .i :- is.int .i #
check-type %string .s :- is.string .s #
check-type (.type | _) .e :- check-type .type .e #
check-type (_ | .remains) .e :- check-type .remains .e #
check-type (%list .type) (.head, .remains)
	:- check-type .type .head
	, check-type (%list .type) .remains
#
check-type %any _ #
check-type .alias .e :- map.retrieve (TYPE-ALIAS .alias, .value), bound .value, check-type .value .e #
check-type .treeType .tree
	:- tree (.tree, .left, .operator, .right)
	, tree (.treeType, .leftType, .operator, .rightType)
	, check-type .leftType .left, check-type .rightType .right
#
check-type .a .a :- is.atom .a, not (starts.with .a '%') #

prototype (.head .remains0) (.head .remains1) :- prototype .remains0 .remains1 :- ! #
prototype _ () #

-------------------------------------------------------------------------------
-- deterministic analysis

-------------------------------------------------------------------------------
-- pattern recog

-------------------------------------------------------------------------------
-- parser

-------------------------------------------------------------------------------
-- compiler

compile () () (.c .c) #
compile () .more (.c0 .cx)
	:- compile .more () (.c0 .cx)
#
compile () (JMP .label) (.c0 .cx)
	:- .c0 = (JMP .label, .cx)
#
compile (.a, .b) .more (.c0 .cx)
	:- compile .a (.b, .more) (.c0 .cx)
#
compile (.a; .b) .more (.c0 .cx)
	:- .c0 = (PUSH-BACKTRACK-POINT, .c1)
	, compile .a (JMP .label) .c1 .c2
	, .c2 = (LABEL .label, .c3)
	, compile .a () .c3 .cx
#
compile (.a = .b) .more (.c0 .cx)
	:- create-node .a .reg0 (.c0 .c1)
	, create-node .a .reg1 (.c1 .c2)
	, .c2 = (JUMP-FAIL .reg0 .reg1, .cx)
#

create-node .a .reg (.c0 .cx)
	:- is.atom .a, .c0 = (ASSIGN-ATOM .reg .a, .cx)
#
create-node .i .reg (.c0 .cx)
	:- is.int .i, .c0 = (ASSIGN-INT .reg .i, .cx)
#
create-node .s .reg (.c0 .cx)
	:- is.string .s, .c0 = (ASSIGN-STRING .reg .s, .cx)
#
create-node .tree .reg (.c0 .cx)
	:- tree (.tree, .left, .operator, .right)
	, create-node .left .regl (.c0 .c1)
	, create-node .right .regr (.c1 .c2)
	, .c2 = (FORM-TREE .operator .regl .regr, .cx)
#

is-user-predicate .call :- was-success (is-user-predicate0 .call) #

is-user-predicate0 .call :- rules .rules, has-rules .rules (.call :- _) #

has-rules (.rule # _) .rule #
has-rules (_ # .remains) .rule :- has-rules .remains .rule #

-------------------------------------------------------------------------------
-- longest common subsequence

lcs () _ () :- ! #
lcs _ () () :- ! #
lcs (.common, .remains1) (.common, .remains2) (.common, .lcs)
	:- lcs-once .remains1 .remains2 .lcs, !
#
lcs (.head1, .remains1) (.head2, .remains2) .lcs
	:- lcs-once (.head1, .remains1) .remains2 .lcs1
	, lcs-once .remains1 (.head2, .remains2) .lcs2
	, longest .lcs1 .lcs2 .lcs
#

-- Note memory leak
lcs-once .a .b .lcs :- map.retrieve (LCS .a .b, .lcs), (bound .lcs, !; lcs .a .b .lcs) #

longest .l .r .result
	:- longest0 .l .r L, !, .result = .l; .result = .r
#

longest0 .l () L #
longest0 () .l R #
longest0 (_, .l1) (_, .l2) .which :- longest0 .l1 .l2 .which #
