using external STANDARD >>
data Color as Red >>
data Color as Black >>
data (Rb-tree :t) over :t as Tree (Color, Rb-tree :t, :t, Rb-tree :t) >>
data (Rb-tree :t) over :t as Empty >>

define cr := Red >>
define cb := Black >>
define rbt-insert := (:t => :t -> Rb-tree :t -> Rb-tree :t) of (
v =>
	define add0 :=
		define balance :=
			case
			|| `Tree (cb, Tree (cr, Tree (cr, $n0, $p0, $n1), $p1, $n2), $p2, $n3)` =>
				Tree (cr, Tree (cb, n0, p0, n1), p1, Tree (cb, n2, p2, n3))
			|| `Tree (cb, Tree (cr, $n0, $p0, Tree (cr, $n1, $p1, $n2)), $p2, $n3)` =>
				Tree (cr, Tree (cb, n0, p0, n1), p1, Tree (cb, n2, p2, n3))
			|| `Tree (cb, $n0, $p0, Tree (cr, Tree (cr, $n1, $p1, $n2), $p2, $n3))` =>
				Tree (cr, Tree (cb, n0, p0, n1), p1, Tree (cb, n2, p2, n3))
			|| `Tree (cb, $n0, $p0, Tree (cr, $n1, $p1, Tree (cr, $n2, $p2, $n3)))` =>
				Tree (cr, Tree (cb, n0, p0, n1), p1, Tree (cb, n2, p2, n3))
			|| id
		>>
		case
		|| `Tree ($color, $n0, $pivot, $n1)` =>
			if (v < pivot) then
				Tree (color, add0 {n0}, pivot, n1) | balance
			else-if (pivot < v) then
				Tree (color, n0, pivot, add0 {n1}) | balance
			else error
		|| `Empty` =>
			Tree (cr, Empty, v, Empty)
		|| anything => error
	>>
	case
	|| `Tree ($color, $n0, $pivot, $n1)` => Tree (cb, n0, pivot, n1) | add0
	|| add0
) >>
define rbt-to-list := (:t => Rb-tree :t -> [:t]) of
	case
	|| `Tree ($color, $n0, $pivot, $n1)` => concat {rbt-to-list {n0}; (pivot;); rbt-to-list {n1};}
	|| `Empty` => ()
	|| anything => error
>>
define dict-insert := (:k => :v => :k -> :v -> Rb-tree (:k, :v) -> Rb-tree (:k, :v)) of (
key => value =>
	rbt-insert {key, value}
) >>
define dict-get := (:k => :v => :k -> Rb-tree (:k, :v) -> :v) of (
key =>
	case
	|| `Tree ($color, $n0, ($key1, $value1), $n1)` =>
		if (key != key1) then
			dict-get {key} {if (key < key1) then n0 else n1}
		else
			value1
	|| anything => error
) >>
