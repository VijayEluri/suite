-------------------------------------------------------------------------------
-- longest common subsequence

lcs .a .b .lcs :- lcs-memoized .a .b .lcs ()/_ #

lcs-memoized .a .b .lcs .t0/.tx
	:- hash .a/.b .hash
	, t23-map .hash/.cached .t0/.t1
	, once (bound .cached, .t1 = .tx; lcs0 .a .b .cached .t1/.tx)
	, .lcs = .cached
#

lcs0 () _ () _ :- ! #
lcs0 _ () () _ :- ! #
lcs0 (.head, .tail1) (.head, .tail2) (.head, .lcs) .t0/.tx
	:- lcs-memoized .tail1 .tail2 .lcs .t0/.tx
	, !
#
lcs0 (.head1, .tail1) (.head2, .tail2) .lcs .t0/.tx
	:- lcs-memoized (.head1, .tail1) .tail2 .lcs1 .t0/.t1
	, lcs-memoized .tail1 (.head2, .tail2) .lcs2 .t1/.tx
	, longer .lcs1 .lcs2 .lcs
#

longer .l .r .result :- longer0 .l .r L, !, .result = .l; .result = .r #

longer0 _ () L #
longer0 () _ R #
longer0 (_, .l1) (_, .l2) .which :- longer0 .l1 .l2 .which #

-------------------------------------------------------------------------------
-- meta-programming

meta .kb (.a, .b) :- meta .kb .a, meta .kb .b #
meta .kb (.a; .b) :- meta .kb .a; meta .kb .b #
meta .kb .call
	:- call-prototype .call .proto
	, member .kb .proto/.rules
	, member .rules .rule
	, generalize .rule (.head :- .tail)
	, .call = .head
	, meta .kb .tail
#

-------------------------------------------------------------------------------
-- deterministic analysis

is-rules-determ .group :- group-rules .group .goal, is-determ .goal #

group-rules () fail #
group-rules (.head :- .tail # .remains) (IN = .head, .tail; .remains1)
	:- group-rules .remains .remains1
#

is-determ (.a, .b) :- is-determ .a, is-determ .b #
is-determ .goal :- is-cut-determ .goal #
is-determ (.a; .b) :- is-cut-determ .a, is-determ .b #
is-determ (.a = .b) #
is-determ yes #
is-determ fail #

is-cut-determ .goal :- split-cut .goal .afterCut, !, is-determ .afterCut #

split-cut .cut () :- to.atom "!" .cut #
split-cut (.cut, .c) .c :- to.atom "!" .cut #
split-cut (_, .c0) .c1 :- split-cut .c0 .c1 #

-------------------------------------------------------------------------------
-- symbolic mathematics

equate .a .b :- equate .b .a #
equate (.a + .b) (.b + .a) #
equate (.a * .b) (.b * .a) #
equate (.a + (.b + .c)) ((.a + .b) + .c) #
equate (.a * (.b * .c)) ((.a * .b) * .c) #
equate (.v + 0) .v #
equate (.v - 0) .v #
equate (.v * 1) .v #
equate (.v / 1) .v #
equate (0 - .v) (-1 * .v) #
equate (.a * (.b + .c)) (.a * .b + .a * .c) #

complexity .i 0 :- is.int .i #
complexity .tree .n1
	:- tree .tree .left _ .right
	, complexity .left .ln
	, complexity .right .rn
	, if (.ln > .rn) then
		let .n1 (.rn + 1)
	else
		let .n1 (.rn + 1)
	, !
#

-------------------------------------------------------------------------------
-- format check

define-signature .sign :- signature-prototype .sign .sign #

check-types () _ #
check-types (.rule # .remains) .signs
	:- check-rule-types .head .tail .signs
	, check-types .remains .signs
#

check-rule-types .rule .signs
	:- decompose-rule .rule .head .tail
	, call-prototype .head .proto
	, member .signs .proto/.sign
	, is-type .head .signs
	, check-predicate-types .tail
#

check-predicate-types (.c1, .c2) .vt
	:- check-predicate-types .c1 .vt
	, check-predicate-types .c2 .vt
#
check-predicate-types (.c1; .c2) .vt
	:- check-predicate-types .c1 .vt
	, check-predicate-types .c2 .vt
#
check-predicate-types (.c1 = .c2)
:- is-type .type .c1 .vt, is-type .type .c2 .vt
#
check-predicate-types .cut :- to.atom "!" .cut #

is-type .v .type .vt :- is-variable .v, map .v/.type #
is-type _ %any _ #
is-type .i %integer _ :- is.int .i #
is-type .s %string _ :- is.string .s #
is-type .e (.type | _) _ :- is-type .type .e #
is-type .e (_ | .tail) _ :- is-type .tail .e #
is-type (.head, .tail) (%list .type) _
	:- is-type .type .head
	, is-type (%list .type) .tail
#
is-type .tree %op/.operator/.leftType/.rightType _
	:- tree .tree .left .operator .right
	, is-type .left .leftType
	, is-type .right .rightType
#
is-type .a .a _ :- is.atom .a, not (starts.with .a '%') #

decompose-rule (.head :- .tail) .head .tail :- ! #
decompose-rule .head .head () #

call-prototype (.name .ps) .name/.n :- params-length .ps .n, ! #
call-prototype .name .name #

params-length .ps .n
	:- if (bound .ps, .ps = _ .ps1) then (
		params-length .ps1 .n1, sum .n 1 .n1
	) else-if (.n > 1, .ps = _ .ps1) then (
		sum .n 1 .n1, params-length .ps1 .n1
	) else (
		(not bound .ps; .ps != _ _), .n = 1
	)
#

is-variable .variable
	:- is.atom .variable, to.atom "." .dot, starts.with .variable .dot
#

map (.k/.v1, _) .k/.v2 :- !, .v1 = .v2 #
map (_, .tail) .e :- map .tail .e #
