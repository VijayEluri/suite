crude-script ::= statement1*

statement1 ::= (statement ";" | statement-block)!
statement-block ::= "{" statement1* "}"
statement ::= statement-for | statement-if | statement-let | statement-return | statement-while | expression
statement-for ::= "for" "(" expression? ";" expression? ";" expression? ")" statement1 | "for" "(" bind "in" expression ")" statement1
statement-if ::= "if" "(" expression ")" statement1 "else" statement1
statement-let ::= "let" bind "=" expression
statement-return ::= "return" expression
statement-while ::= "while" "(" expression ")" statement1

expression ::= expression-assign
expression-assign ::= expression-invoke (op-assign expression-assign)?
expression-invoke ::= expression-bool-or ("|" expression-bool-or)*
expression-bool-or ::= expression-bool-and ("||" expression-bool-or)?
expression-bool-and ::= expression-compare ("&&" expression-bool-and)?
expression-compare ::= expression-bool-not ((@"<" | @"<=" | @"==" | @"!=") expression-compare)?
expression-bool-not ::= "!"* expression-or
expression-or ::= expression-and ("or" expression-or)?
expression-and ::= expression-xor ("and" expression-and)?
expression-xor ::= expression-shift ("xor" expression-xor)?
expression-shift ::= expression-not ((@"<<" | @">>") expression-not)*
expression-not ::= (@"~")* expression-add
expression-add ::= expression-sub ("+" expression-add)?
expression-sub ::= (@"+" | @"-") expression-mul ("-" expression-mul)*
expression-mul ::= expression-div ("*" expression-mul)?
expression-div ::= expression-as ((@"/" | @"%") expression-as)*
expression-as ::= expression-pp ("as" expression-pp)*
expression-pp ::= op-inc-dec* expression-prop op-inc-dec*
expression-prop ::= expression-obj (@"." <IDENTIFIER> | @"[" expression "]" | @"(" expression ")")*
expression-obj ::= <IDENTIFIER> | expression-array | expression-dict | expression-lambda | expression-tuple | constant
expression-array ::= "[" (expression ",")* "]"
expression-dict ::= "{" (<IDENTIFIER> ":" expression ",")* "}"
expression-lambda ::= bind "=>" (expression | statement-block)
expression-tuple ::= "(" expression ("," expression)* ")"

bind ::= <IDENTIFIER> | bind-array | bind-dict | bind-tuple | constant
bind-array ::= "[" (bind ",")* "]"
bind-dict ::= "{" (<IDENTIFIER> ":" bind ",")* "}"
bind-tuple ::= "(" bind ("," bind)* ")"

op-assign ::= @"=" | @"|=" | @"&=" | @"<<=" | @">>=" | @"+=" | @"-=" | @"*=" | @"/="
op-inc-dec ::= @"++" | @"--"

constant ::= <INTEGER_LITERAL> | <STRING_LITERAL>
