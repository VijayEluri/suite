-- Pairing heap
-- http://en.wikipedia.org/wiki/Pairing_heap

using external STANDARD >>
data (heap {:t}) over :t as Empty >>
data (heap {:t}) over :t as Heap (:t, [heap {:t}]) >>

define find-min =
	`Heap ($elem, $list)` => elem
>>
define meld = (:t => heap {:t} -> heap {:t} -> heap {:t}) of (
heap0 => heap1 =>
	case
	|| (heap0 = `Heap ($elem0, $heaps0)`)
		case
		|| (heap1 = `Heap ($elem1, $heaps1)`)
			if (elem0 < elem1) then
				Heap (elem0, (heap1; heaps0))
			else
				Heap (elem1, (heap0; heaps1))
		|| heap0
	|| heap1
) >>
define add = (heap => elem =>
	meld {Heap (elem,)} {heap}
) >>
define delete-min = (
	define merge-pairs =
		case
		|| `$h0; $h1; $hs` => meld {meld {h0} {h1}} {merge-pairs {hs}}
		|| `$h;` => h
		|| anything => error
	>>
	`Heap ($elem, $heap)` => merge-pairs {heap}
) >>
