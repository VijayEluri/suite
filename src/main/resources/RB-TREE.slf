using STANDARD >>
define type RED of (color,) >>
define type BLACK of (color,) >>
define type (RB-TREE (color, rb-tree {:t}, :t, rb-tree {:t})) over (:t,) of (rb-tree {:t},) >>
define type EMPTY over (:t,) of (rb-tree {:t},) >>
define cr = type color RED >>
define cb = type color BLACK >>
define rbt-add = type (:t => :t -> rb-tree {:t} -> rb-tree {:t}) (v =>
	define add0 = type (:t => rb-tree {:t} -> rb-tree {:t}) (
		define balance = type (:t => rb-tree {:t} -> rb-tree {:t}) (
			case
			|| `RB-TREE (cb, RB-TREE (cr, RB-TREE (cr, $n0, $p0, $n1), $p1, $n2), $p2, $n3)` =>
				RB-TREE (cr, RB-TREE (cb, n0, p0, n1), p1, RB-TREE (cb, n2, p2, n3))
			|| `RB-TREE (cb, RB-TREE (cr, $n0, $p0, RB-TREE (cr, $n1, $p1, $n2)), $p2, $n3)` =>
				RB-TREE (cr, RB-TREE (cb, n0, p0, n1), p1, RB-TREE (cb, n2, p2, n3))
			|| `RB-TREE (cb, $n0, $p0, RB-TREE (cr, RB-TREE (cr, $n1, $p1, $n2), $p2, $n3))` =>
				RB-TREE (cr, RB-TREE (cb, n0, p0, n1), p1, RB-TREE (cb, n2, p2, n3))
			|| `RB-TREE (cb, $n0, $p0, RB-TREE (cr, $n1, $p1, RB-TREE (cr, $n2, $p2, $n3)))` =>
				RB-TREE (cr, RB-TREE (cb, n0, p0, n1), p1, RB-TREE (cb, n2, p2, n3))
			|| id
		) >>
		case
		|| `RB-TREE ($color, $n0, $pivot, $n1)` =>
			if (v < pivot) then
				RB-TREE (color, add0 {n0}, pivot, n1) | balance
			else-if (v > pivot) then
				RB-TREE (color, n0, pivot, add0 {n1}) | balance
			else error
		|| `EMPTY` =>
			RB-TREE (cr, EMPTY, v, EMPTY)
		|| anything => error
	) >>
	case
	|| `RB-TREE ($color, $n0, $pivot, $n1)` => RB-TREE (cb, n0, pivot, n1) | add0
	|| add0
) >>
define rbt-to-list = type (:t => rb-tree {:t} -> list-of :t) (
	case
	|| `RB-TREE ($color, $n0, $pivot, $n1)` => concat {rbt-to-list {n0}; (pivot;); rbt-to-list {n1};}
	|| `EMPTY` => ()
	|| anything => error
) >>
define dict-add = type (:k => :v => :k -> :v -> rb-tree {:k, :v} -> rb-tree {:k, :v}) (key => value =>
	rbt-add {key, value}
) >>
define dict-get = type (:k => :v => :k -> rb-tree {:k, :v} -> :v) (key =>
	case
	|| `RB-TREE ($color, $n0, ($key1, $value1), $n1)` =>
		if (key != key1) then
			dict-get {key} {if (key < key1) then n0 else n1}
		else
			value1
	|| anything => error
) >>
