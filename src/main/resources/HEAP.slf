-- Pairing heap
-- http://en.wikipedia.org/wiki/Pairing_heap

using STANDARD >>
define type EMPTY over :t of (heap {:t}) >>
define type (HEAP (:t, [heap {:t}])) over :t of (heap {:t}) >>
define elem = type (heap {:t} -> :t)
	`HEAP ($elem, $list)` => elem
>>
define children = type (heap {:t} -> [heap {:t}])
	`HEAP ($elem, $list)` => list
>>
define find-min =
	elem
>>
define meld = (heap0 => heap1 =>
	if (heap0 != EMPTY) then
		if (heap1 != EMPTY) then
			define elem0 = elem {heap0} >>
			define elem1 = elem {heap1} >>
			if (elem0 < elem1) then
				HEAP (elem0, (heap1; children {heap0}))
			else
				HEAP (elem1, (heap0; children {heap1}))
		else heap0
	else heap1
) >>
define add = (heap => elem =>
	meld {HEAP (elem,)} {heap}
) >>
define delete-min = (heap =>
	define merge-pairs =
		case
		|| `$h0; $h1; $hs` => meld {meld {h0} {h1}} {merge-pairs {hs}}
		|| `$h;` => h
		|| anything => error
	>>
	merge-pairs {children {heap}}
) >>
