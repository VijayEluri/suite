use external STANDARD ~
data (B-tree :t) over :t as Empty ~
data (B-tree :t) over :t as (Tree [:t, B-tree :t]) ~

define max-branches := 4 ~
define min-branches := max-branches / 2 ~

define snoc := es => e =>
	es ++ (e;)
~
define create-slot := slots =>
	let `$pivot, $child` := slots | reverse | head ~ pivot, Tree slots
~
define create-root := slots =>
	if (length_{slots} = 1) then
		let `$pivot, $child` := slots | head ~ child
	else
		Tree slots
~
define find-slot :=
	define find-slot0 := left => key => `$slot; $slots` =>
		let `$pivot, $child` := slot ~
		if (pivot < key) then
			find-slot0_{snoc_{left}_{slot}}_{key}_{slots}
		else
			left, slot, slots
	~
	find-slot0_{}
~
define find := key => `Tree $slots` =>
	let `$left, $slot, $right` := find-slot_{key}_{slots} ~
	let `$pivot, $child` := slot ~
	let found := if (child != Empty) then (find_{key}_{child}) else pivot ~
	if (key = found) then found else error ()
~
define insert := key =>
	define add0 := slots0 =>
		let `$left, $slot, $right` := find-slot_{key}_{slots0} ~
		let `$pivot, $child` := slot ~
		let replaceSlots :=
			if (child != Empty) then
				let `Tree $childSlots` := child ~ add0_{childSlots}
			else-if (key != pivot) then
				key, Empty; slot;
			else
				error ()
		~
		let slots1 := concat_{left; replaceSlots; right;} ~
		if (max-branches <= length_{slots1}) then
			let `$ls, $rs` := take-drop_{min-branches}_{slots1} ~
			create-slot_{ls}; create-slot_{rs};
		else
			create-slot_{slots1};
	~
	`Tree $slots` =>
	slots | add0 | create-root
~
define remove := key =>
	define lht := list =>
		head_{list}, tail_{list}
	~
	define rth := list =>
		let rev := reverse_{list} ~
		reverse_{tail_{rev}}, head_{rev}
	~
	define merge := left => right =>
		if (max-branches <= length_{left} + length_{right}) then
			if (min-branches < length_{left}) then
				let `$left1, $slot` := rth_{left} ~
				create-slot_{left1}; create-slot_{cons_{slot}_{right}};
			else-if (min-branches < length_{right}) then
				let `$slot, $right1` := lht_{right} ~
				create-slot_{snoc_{left}_{slot}}; create-slot_{right1};
			else
				create-slot_{left}; create-slot_{right};
		else
			create-slot_{left ++ right};
	~
	define remove0 := slots0 =>
		let `$left, ($pivot, $child), $right` := find-slot_{key}_{slots0} ~
		if (child != Empty) then
			let `Tree $childSlots` := child ~
			let slots1 := remove0_{childSlots} ~
			if (length_{slots1} < min-branches) then
				if (left != ()) then
					let `$left1, $borrowSlot` := rth_{left} ~
					concat_{left1; merge_{borrowSlot;}_{slots1}; right;}
				else-if (right != ()) then
					let `$borrowSlot, $right1` := lht_{right} ~
					concat_{left; merge_{slots1}_{borrowSlot;}; right1;}
				else
					create-slot_{slots1};
			else
				concat_{left; slots1; right;}
		else-if (key = pivot) then
			left ++ right
		else
			error ()
	~
	`Tree $slots` =>
	slots | remove0 | create-root
~
