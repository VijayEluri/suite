using external STANDARD >>
define nothing := atom:Nothing >>
define liftm :=
	fun => m0 => (return # fun {call {m0}})
>>
define liftm2 :=
	fun => m0 => m1 => (return # fun {call {m0}} {call {m1}})
>>
define appendm :=
	liftm2 {append}
>>
define concatm :=
	fold-right {appendm} {return # ()}
>>
define seqm :=
	define seq := (:t => any -> :t -> :t) of
		atom:INTRN!MonadIntrinsics.seq | getintrn | callintrn2
	>>
	do0 => do1 => (return #
		seq {call {do0}} {call {do1}}
	)
>>
define seqsm :=
	fold-right {seqm} {return # nothing}
>>
define whilem :=
	cond => loop => (return #
		if (call {cond})
		then (call {loop # whilem {cond} {loop}})
		else nothing
	)
>>
