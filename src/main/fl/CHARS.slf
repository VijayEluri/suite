using external STANDARD >>
define cs-append := (data^Chars -> data^Chars -> data^Chars) of
	atom:INTRN!CharsIntrinsics.append | getintrn | callintrn-v2
>>
define cs-drain := (data^CharsStream -> [data^Chars]) of
	atom:INTRN!CharsIntrinsics.drain | getintrn | callintrn-v1
>>
define cs-from-string := (string -> data^Chars) of
	atom:INTRN!CharsIntrinsics.stringChars | getintrn | callintrn-v1
>>
define cs-split := (number -> data^Chars -> (data^Chars, data^Chars)) of
	atom:INTRN!CharsIntrinsics.split | getintrn | callintrn-v2
>>
define cs-splits := (number -> [data^Chars] -> [data^Chars]) of
	atom:INTRN!CharsIntrinsics.splits | getintrn | callintrn-v2
>>
define cs-subchars := (number -> number -> data^Chars -> data^Chars) of
	atom:INTRN!CharsIntrinsics.subchars | getintrn | callintrn-v3
>>
define cs-to-string := (data^Chars -> string) of
	atom:INTRN!CharsIntrinsics.charsString | getintrn | callintrn-v1
>>
