accessor-body ::= block | ";"
accessor-declarations ::= get-accessor-declaration (set-accessor-declaration)? | set-accessor-declaration (get-accessor-declaration)?
accessor-modifier ::= "protected" | "internal" | "private" | "protected" "internal" | "internal" "protected"
add-accessor-declaration ::= (attributes)? "add" block
additive-expression ::= multiplicative-expression | additive-expression "+" multiplicative-expression | additive-expression "-" multiplicative-expression
addressof-expression ::= "&" unary-expression
and-expression ::= equality-expression | and-expression "&" equality-expression
anonymous-function-body ::= expression | block
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature
anonymous-method-expression ::= "delegate" (explicit-anonymous-function-signature)? block
anonymous-object-creation-expression ::= "new" anonymous-object-initializer
anonymous-object-initializer ::= "{" (member-declarator-list)? "}" | "{" member-declarator-list "," "}"
argument ::= (argument-name)? argument-value
argument-list ::= argument | argument-list "," argument
argument-name ::= identifier ":"
argument-value ::= expression | "ref" variable-reference | "out" variable-reference
array-creation-expression ::= "new" non-array-type "[" expression-list "]" (rank-specifiers)? (array-initializer)? | "new" array-type array-initializer | "new" rank-specifier array-initializer
array-initializer ::= "{" (variable-initializer-list)? "}" | "{" variable-initializer-list "," "}"
array-type ::= non-array-type rank-specifiers
assignment ::= unary-expression assignment-operator expression
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment | expression: | non-assignment-expression | assignment
asterisks ::= "*" | asterisks "*"
attribute ::= attribute-name (attribute-arguments)?
attribute-argument-expression ::= expression
attribute-arguments ::= "(" (positional-argument-list)? ")" | "(" positional-argument-list "," named-argument-list ")" | "(" named-argument-list ")"
attribute-list ::= attribute | attribute-list "," attribute
attribute-name ::= type-name
attribute-section ::= "[" (attribute-target-specifier)? attribute-list "]" | "[" (attribute-target-specifier)? attribute-list "," "]"
attribute-sections ::= attribute-section | attribute-sections attribute-section
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | "type"
attribute-target-specifier ::= attribute-target ":"
attributes ::= attribute-sections
available-identifier ::= <IDENTIFIER> /except/ keyword
base-access ::= "base" "." identifier | "base" "[" argument-list "]"
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")"
block ::= "{" (statement-list)? "}"
boolean-expression ::= expression
boolean-literal ::= "true" | "false"
break-statement ::= "break" ";"
buffer-element-type ::= type
cast-expression ::= "(" type ")" unary-expression
catch-clauses ::= specific-catch-clauses (general-catch-clause)? | (specific-catch-clauses)? general-catch-clause
character ::= single-character | simple-escape-sequence | hexadecimal-escape-sequence | unicode-escape-sequence
character-literal ::= "'" character "'"
checked-expression ::= "checked" "(" expression ")"
checked-statement ::= "checked" block
class-base ::= ":" class-type | ":" interface-type-list | ":" class-type "," interface-type-list
class-body ::= "{" (class-member-declarations)? "}"
class-declaration ::= (attributes)? (class-modifiers)? ("partial")? "class" identifier (type-parameter-list)? (class-base)? (type-parameter-constraints-clauses)? class-body (";")?
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration
class-member-declarations ::= class-member-declaration | class-member-declarations class-member-declaration
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" | "unsafe"
class-modifiers ::= class-modifier | class-modifiers class-modifier
class-type ::= type-name | "object" | "dynamic" | "string"
collection-initializer ::= "{" element-initializer-list "}" | "{" element-initializer-list "," "}"
combining-character ::= [uc:Mn] | [uc:Mc] | <IGNORE:A-unicode-escape-sequence-representing-a-character-of-classes-Mn-or-Mc>
commas ::= "," | commas ","
comment ::= single-line-comment | delimited-comment
compilation-unit ::= (extern-alias-directives)? (using-directives)? (global-attributes)? (namespace-member-declarations)?
conditional-and-expression ::= inclusive-or-expression | conditional-and-expression "&&" inclusive-or-expression
conditional-expression ::= null-coalescing-expression | null-coalescing-expression "?" expression ":" expression
conditional-or-expression ::= conditional-and-expression | conditional-or-expression "||" conditional-and-expression
conditional-section ::= input-section | skipped-section
conditional-symbol ::= identifier-or-keyword /except/ ("true" | "false")
connecting-character ::= [uc:Pc] | <IGNORE:A-unicode-escape-sequence-representing-a-character-of-the-class-Pc>
constant-declaration ::= (attributes)? (constant-modifiers)? "const" type constant-declarators ";"
constant-declarator ::= identifier "=" constant-expression | identifier "=" constant-expression
constant-declarators ::= constant-declarator | constant-declarators "," constant-declarator | constant-declarator | constant-declarators "," constant-declarator
constant-expression ::= expression
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private"
constant-modifiers ::= constant-modifier | constant-modifiers constant-modifier
constructor-body ::= block | ";"
constructor-constraint ::= "new" "(" ")"
constructor-declaration ::= (attributes)? (constructor-modifiers)? constructor-declarator constructor-body
constructor-declarator ::= identifier "(" (formal-parameter-list)? ")" (constructor-initializer)?
constructor-initializer ::= ":" "base" "(" (argument-list)? ")" | ":" "this" "(" (argument-list)? ")"
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" | "unsafe"
constructor-modifiers ::= constructor-modifier | constructor-modifiers constructor-modifier
continue-statement ::= "continue" ";"
conversion-operator-declarator ::= "implicit" "operator" type "(" type identifier ")" | "explicit" "operator" type "(" type identifier ")"
decimal-digit ::= [0-9]
decimal-digit-character ::= [uc:Nd] | <IGNORE:A-unicode-escape-sequence-representing-a-character-of-the-class-Nd>
decimal-digits ::= decimal-digit | decimal-digits decimal-digit
decimal-integer-literal ::= decimal-digits (integer-type-suffix)?
declaration-statement ::= local-variable-declaration ";" | local-constant-declaration ";"
default-argument ::= "=" expression
default-value-expression ::= "default" "(" type ")"
delegate-creation-expression ::= "new" delegate-type "(" expression ")"
delegate-declaration ::= (attributes)? (delegate-modifiers)? "delegate" return-type identifier (variant-type-parameter-list)? "(" (formal-parameter-list)? ")" (type-parameter-constraints-clauses)? ";"
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "unsafe"
delegate-modifiers ::= delegate-modifier | delegate-modifiers delegate-modifier
delegate-type ::= type-name
delimited-comment ::= "/*" (delimited-comment-text)? asterisks "/"
delimited-comment-section ::= "/" | (asterisks)? not-slash-or-asterisk
delimited-comment-text ::= delimited-comment-section | delimited-comment-text delimited-comment-section
destructor-body ::= block | ";"
destructor-declaration ::= (attributes)? ("extern")? "~" identifier "(" ")" destructor-body | (attributes)? ("extern")? ("unsafe")? "~" identifier "(" ")" destructor-body | (attributes)? ("unsafe")? ("extern")? "~" identifier "(" ")" destructor-body
dim-separators ::= "," | dim-separators "," | "," | dim-separators ","
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";"
element-access ::= primary-no-array-creation-expression "[" argument-list "]"
element-initializer ::= non-assignment-expression | "{" expression-list "}"
element-initializer-list ::= element-initializer | element-initializer-list "," element-initializer
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement | unsafe-statement | fixed-statement
empty-statement ::= ";"
enum-base ::= ":" integral-type
enum-body ::= "{" (enum-member-declarations)? "}" | "{" enum-member-declarations "," "}"
enum-declaration ::= (attributes)? (enum-modifiers)? "enum" identifier (enum-base)? enum-body (";")?
enum-member-declaration ::= (attributes)? identifier | (attributes)? identifier "=" constant-expression
enum-member-declarations ::= enum-member-declaration | enum-member-declarations "," enum-member-declaration
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private"
enum-modifiers ::= enum-modifier | enum-modifiers enum-modifier
enum-type ::= type-name
equality-expression ::= relational-expression | equality-expression "==" relational-expression | equality-expression "!=" relational-expression
event-accessor-declarations ::= add-accessor-declaration remove-accessor-declaration | remove-accessor-declaration add-accessor-declaration
event-declaration ::= (attributes)? (event-modifiers)? "event" type variable-declarators ";" | (attributes)? (event-modifiers)? "event" type member-name "{" event-accessor-declarations "}"
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "unsafe"
event-modifiers ::= event-modifier | event-modifiers event-modifier
exclusive-or-expression ::= and-expression | exclusive-or-expression "^" and-expression
explicit-anonymous-function-parameter ::= (anonymous-function-parameter-modifier)? type identifier | anonymous-function-parameter-modifier: | "ref" | "out"
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter
explicit-anonymous-function-signature ::= "(" (explicit-anonymous-function-parameter-list)? ")"
exponent-part ::= "e" (sign)? decimal-digits | "E" (sign)? decimal-digits
expression-list ::= expression | expression-list "," expression
expression-statement ::= statement-expression ";"
extern-alias-directive ::= "extern" "alias" identifier ";"
extern-alias-directives ::= extern-alias-directive | extern-alias-directives extern-alias-directive
field-declaration ::= (attributes)? (field-modifiers)? type variable-declarators ";"
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" | "unsafe"
field-modifiers ::= field-modifier | field-modifiers field-modifier
file-name ::= "%22" file-name-characters "%22"
file-name-character ::= <CHARACTER> /except/ "%22"
file-name-characters ::= file-name-character | file-name-characters file-name-character
finally-clause ::= "finally" block
fixed-parameter ::= (attributes)? (parameter-modifier)? type identifier (default-argument)?
fixed-parameters ::= fixed-parameter | fixed-parameters "," fixed-parameter
fixed-pointer-declarator ::= identifier "=" fixed-pointer-initializer
fixed-pointer-declarators ::= fixed-pointer-declarator | fixed-pointer-declarators "," fixed-pointer-declarator
fixed-pointer-initializer ::= "&" variable-reference | expression
fixed-size-buffer-declaration ::= (attributes)? (fixed-size-buffer-modifiers)? "fixed" buffer-element-type fixed-size-buffer-declarators ";"
fixed-size-buffer-declarator ::= identifier "[" constant-expression "]"
fixed-size-buffer-declarators ::= fixed-size-buffer-declarator | fixed-size-buffer-declarator fixed-size-buffer-declarators
fixed-size-buffer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "unsafe"
fixed-size-buffer-modifiers ::= fixed-size-buffer-modifier | fixed-size-buffer-modifier fixed-size-buffer-modifiers
fixed-statement ::= "fixed" "(" pointer-type fixed-pointer-declarators ")" embedded-statement
floating-point-type ::= "float" | "double"
for-condition ::= boolean-expression
for-initializer ::= local-variable-declaration | statement-expression-list
for-iterator ::= statement-expression-list
for-statement ::= "for" "(" (for-initializer)? ";" (for-condition)? ";" (for-iterator)? ")" embedded-statement
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement
formal-parameter-list ::= fixed-parameters | fixed-parameters "," parameter-array | parameter-array
formatting-character ::= [uc:Cf] | <IGNORE:A-unicode-escape-sequence-representing-a-character-of-the-class-Cf>
from-clause ::= "from" (type)? identifier "in" expression
general-catch-clause ::= "catch" block
generic-dimension-specifier ::= "<" (commas)? ">"
get-accessor-declaration ::= (attributes)? (accessor-modifier)? "get" accessor-body
global-attribute-section ::= "[" global-attribute-target-specifier attribute-list "]" | "[" global-attribute-target-specifier attribute-list "," "]"
global-attribute-sections ::= global-attribute-section | global-attribute-sections global-attribute-section
global-attribute-target ::= "assembly" | "module"
global-attribute-target-specifier ::= global-attribute-target ":"
global-attributes ::= global-attribute-sections
goto-statement ::= "goto" identifier ";" | "goto" "case" constant-expression ";" | "goto" "default" ";"
group-clause ::= "group" expression "by" expression
hex-digit ::= [0-9] | [A-F] | [a-f]
hex-digits ::= hex-digit | hex-digits hex-digit
hexadecimal-escape-sequence ::= "\x" hex-digit (hex-digit)? (hex-digit)? (hex-digit)?
hexadecimal-integer-literal ::= "0x" hex-digits (integer-type-suffix)? | "0X" hex-digits (integer-type-suffix)?
identifier ::= available-identifier | "@" identifier-or-keyword
identifier-or-keyword ::= identifier-start-character (identifier-part-characters)?
identifier-part-character ::= letter-character | decimal-digit-character | connecting-character | combining-character | formatting-character
identifier-part-characters ::= identifier-part-character | identifier-part-characters identifier-part-character
identifier-start-character ::= letter-character | "%5F"
if-statement ::= "if" "(" boolean-expression ")" embedded-statement | "if" "(" boolean-expression ")" embedded-statement "else" embedded-statement
implicit-anonymous-function-parameter ::= identifier
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter
implicit-anonymous-function-signature ::= "(" (implicit-anonymous-function-parameter-list)? ")" | implicit-anonymous-function-parameter
inclusive-or-expression ::= exclusive-or-expression | inclusive-or-expression "|" exclusive-or-expression
indexer-declaration ::= (attributes)? (indexer-modifiers)? indexer-declarator "{" accessor-declarations "}"
indexer-declarator ::= type "this" "[" formal-parameter-list "]" | type interface-type "." "this" "[" formal-parameter-list "]"
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "unsafe"
indexer-modifiers ::= indexer-modifier | indexer-modifiers indexer-modifier
initializer-value ::= expression | object-or-collection-initializer
input ::= (input-section)?
input-character ::= <CHARACTER> /except/ "%0A"
input-characters ::= input-character | input-characters input-character
input-element ::= whitespace | comment | token
input-elements ::= input-element | input-elements input-element
input-section ::= input-section-part | input-section input-section-part
input-section-part ::= (input-elements)? new-line | pp-directive
integer-literal ::= decimal-integer-literal | hexadecimal-integer-literal
integer-type-suffix ::= "U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
interface-accessors ::= (attributes)? "get" ";" | (attributes)? "set" ";" | (attributes)? "get" ";" (attributes)? "set" ";" | (attributes)? "set" ";" (attributes)? "get" ";"
interface-base ::= ":" interface-type-list
interface-body ::= "{" (interface-member-declarations)? "}"
interface-declaration ::= (attributes)? (interface-modifiers)? ("partial")? "interface" identifier (variant-type-parameter-list)? (interface-base)? (type-parameter-constraints-clauses)? interface-body (";")?
interface-event-declaration ::= (attributes)? ("new")? "event" type identifier ";"
interface-indexer-declaration ::= (attributes)? ("new")? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}"
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration
interface-member-declarations ::= interface-member-declaration | interface-member-declarations interface-member-declaration
interface-method-declaration ::= (attributes)? ("new")? return-type identifier type-parameter-list "(" (formal-parameter-list)? ")" (type-parameter-constraints-clauses)? ";"
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "unsafe"
interface-modifiers ::= interface-modifier | interface-modifiers interface-modifier
interface-property-declaration ::= (attributes)? ("new")? type identifier "{" interface-accessors "}"
interface-type ::= type-name
interface-type-list ::= interface-type | interface-type-list "," interface-type
invocation-expression ::= primary-expression "(" (argument-list)? ")"
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement
join-clause ::= "join" (type)? identifier "in" expression "on" expression "equals" expression
join-into-clause ::= "join" (type)? identifier "in" expression "on" expression "equals" expression "into" identifier
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while"
labeled-statement ::= identifier ":" statement
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body
let-clause ::= "let" identifier "=" expression
letter-character ::= [uc:Lu] | [uc:Ll] | [uc:Lt] | [uc:Lm] | [uc:Lo] | [uc:Nl] | <IGNORE:A-unicode-escape-sequence-representing-a-character-of-classes-Lu,-Ll,-Lt,-Lm,-Lo,-or-Nl>
line-indicator ::= decimal-digits whitespace file-name | decimal-digits | "default" | "hidden"
literal ::= boolean-literal | integer-literal | real-literal | character-literal | string-literal | null-literal
local-constant-declaration ::= "const" type constant-declarators
local-variable-declaration ::= local-variable-type local-variable-declarators
local-variable-declarator ::= identifier | identifier "=" local-variable-initializer
local-variable-declarators ::= local-variable-declarator | local-variable-declarators "," local-variable-declarator
local-variable-initializer ::= expression | array-initializer | stackalloc-initializer
local-variable-type ::= type | "var"
lock-statement ::= "lock" "(" expression ")" embedded-statement
member-access ::= primary-expression "." identifier (type-argument-list)? | predefined-type "." identifier (type-argument-list)? | qualified-alias-member "." identifier
member-declarator ::= simple-name | member-access | identifier "=" expression
member-declarator-list ::= member-declarator | member-declarator-list "," member-declarator
member-initializer ::= identifier "=" initializer-value
member-initializer-list ::= member-initializer | member-initializer-list "," member-initializer
member-name ::= identifier | interface-type "." identifier | identifier | interface-type "." identifier
method-body ::= block | ";"
method-declaration ::= method-header method-body
method-header ::= (attributes)? (method-modifiers)? ("partial")? return-type member-name (type-parameter-list)? "(" (formal-parameter-list)? ")" (type-parameter-constraints-clauses)?
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "unsafe"
method-modifiers ::= method-modifier | method-modifiers method-modifier
multiplicative-expression ::= unary-expression | multiplicative-expression "*" unary-expression | multiplicative-expression "/" unary-expression | multiplicative-expression "%" unary-expression
named-argument ::= identifier "=" attribute-argument-expression
named-argument-list ::= named-argument | named-argument-list "," named-argument
namespace-body ::= "{" (extern-alias-directives)? (using-directives)? (namespace-member-declarations)? "}"
namespace-declaration ::= "namespace" qualified-identifier namespace-body (";")?
namespace-member-declaration ::= namespace-declaration | type-declaration
namespace-member-declarations ::= namespace-member-declaration | namespace-member-declarations namespace-member-declaration
namespace-name ::= namespace-or-type-name
namespace-or-type-name ::= identifier (type-argument-list)? | namespace-or-type-name "." identifier (type-argument-list)? | qualified-alias-member
new-line ::= "%0D" | "%0A" | "%0D%0A" | "%85" | "%U2028" | "%U2029"
new-line-character ::= "%0D" | "%0A" | "%85" | "%U2028" | "%U2029"
non-array-type ::= type
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression
non-nullable-value-type ::= type
not-number-sign ::= <CHARACTER> /except/ "#"
not-slash-or-asterisk ::= <CHARACTER> /except/ ("/" | "#")
null-coalescing-expression ::= conditional-or-expression | conditional-or-expression "??" null-coalescing-expression
null-literal ::= "null"
nullable-type ::= non-nullable-value-type "?"
numeric-type ::= integral-type | floating-point-type | "decimal"
object-creation-expression ::= "new" type "(" (argument-list)? ")" (object-or-collection-initializer)? | "new" type object-or-collection-initializer
object-initializer ::= "{" (member-initializer-list)? "}" | "{" member-initializer-list "," "}"
object-or-collection-initializer ::= object-initializer | collection-initializer
operator-body ::= block | ";"
operator-declaration ::= (attributes)? operator-modifiers operator-declarator operator-body
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator
operator-modifier ::= "public" | "static" | "extern" | "unsafe"
operator-modifiers ::= operator-modifier | operator-modifiers operator-modifier
operator-or-punctuator ::= "{" | "}" | "[" | "]" | "(" | ")" | "." | "," | ":" | ";" | "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "!" | "~" | "=" | "<" | ">" | "?" | "??" | "::" | "++" | "--" | "&&" | "||" | "->" | "==" | "!=" | "<=" | ">=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<" | "<<=" | "=>"
orderby-clause ::= "orderby" orderings
ordering ::= expression (ordering-direction)?
ordering-direction ::= "ascending" | "descending"
orderings ::= ordering | orderings "," ordering
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<="
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false"
parameter-array ::= (attributes)? "params" array-type identifier
parameter-modifier ::= "ref" | "out" | "this"
parenthesized-expression ::= "(" expression ")"
pointer-element-access ::= primary-no-array-creation-expression "[" expression "]"
pointer-indirection-expression ::= "*" unary-expression
pointer-member-access ::= primary-expression "->" identifier (type-argument-list)?
pointer-type ::= unmanaged-type "*" | "void" "*"
positional-argument ::= (argument-name)? attribute-argument-expression
positional-argument-list ::= positional-argument | positional-argument-list "," positional-argument
post-decrement-expression ::= primary-expression "--"
post-increment-expression ::= primary-expression "++"
pp-and-expression ::= pp-equality-expression | pp-and-expression (whitespace)? "&&" (whitespace)? pp-equality-expression
pp-conditional ::= pp-if-section (pp-elif-sections)? (pp-else-section)? pp-endif
pp-declaration ::= (whitespace)? "#" (whitespace)? "define" whitespace conditional-symbol pp-new-line | (whitespace)? "#" (whitespace)? "undef" whitespace conditional-symbol pp-new-line
pp-diagnostic ::= (whitespace)? "#" (whitespace)? "error" pp-message | (whitespace)? "#" (whitespace)? "warning" pp-message
pp-directive ::= pp-declaration | pp-conditional | pp-line | pp-diagnostic | pp-region | pp-pragma
pp-elif-section ::= (whitespace)? "#" (whitespace)? "elif" whitespace pp-expression pp-new-line (conditional-section)?
pp-elif-sections ::= pp-elif-section | pp-elif-sections pp-elif-section
pp-else-section ::= (whitespace)? "#" (whitespace)? "else" pp-new-line (conditional-section)?
pp-end-region ::= (whitespace)? "#" (whitespace)? "endregion" pp-message
pp-endif ::= (whitespace)? "#" (whitespace)? "endif" pp-new-line
pp-equality-expression ::= pp-unary-expression | pp-equality-expression (whitespace)? "==" (whitespace)? pp-unary-expression | pp-equality-expression (whitespace)? "!=" (whitespace)? pp-unary-expression
pp-expression ::= (whitespace)? pp-or-expression (whitespace)?
pp-if-section ::= (whitespace)? "#" (whitespace)? "if" whitespace pp-expression pp-new-line (conditional-section)?
pp-line ::= (whitespace)? "#" (whitespace)? "line" whitespace line-indicator pp-new-line
pp-message ::= new-line | whitespace (input-characters)? new-line
pp-new-line ::= (whitespace)? (single-line-comment)? new-line
pp-or-expression ::= pp-and-expression | pp-or-expression (whitespace)? "||" (whitespace)? pp-and-expression
pp-pragma ::= (whitespace)? "#" (whitespace)? "pragma" whitespace pragma-body pp-new-line
pp-primary-expression ::= "true" | "false" | conditional-symbol | "(" (whitespace)? pp-expression (whitespace)? ")"
pp-region ::= pp-start-region (conditional-section)? pp-end-region
pp-start-region ::= (whitespace)? "#" (whitespace)? "region" pp-message
pp-unary-expression ::= pp-primary-expression | "!" (whitespace)? pp-unary-expression
pragma-body ::= pragma-warning-body
pragma-warning-body ::= "warning" whitespace warning-action | "warning" whitespace warning-action whitespace warning-list
pre-decrement-expression ::= "--" unary-expression
pre-increment-expression ::= "++" unary-expression
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort"
primary-constraint ::= class-type | "class" | "struct"
primary-expression ::= primary-no-array-creation-expression | array-creation-expression
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression | pointer-member-access | pointer-element-access | sizeof-expression
property-declaration ::= (attributes)? (property-modifiers)? type member-name "{" accessor-declarations "}"
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "unsafe"
property-modifiers ::= property-modifier | property-modifiers property-modifier
qualified-alias-member ::= identifier "::" identifier (type-argument-list)?
qualified-identifier ::= identifier | qualified-identifier "." identifier
query-body ::= (query-body-clauses)? select-or-group-clause (query-continuation)?
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause
query-body-clauses ::= query-body-clause | query-body-clauses query-body-clause
query-continuation ::= "into" identifier query-body
query-expression ::= from-clause query-body
quote-escape-sequence ::= "%22%22"
rank-specifier ::= "[" (dim-separators)? "]" | "[" (dim-separators)? "]"
rank-specifiers ::= rank-specifier | rank-specifiers rank-specifier | rank-specifier | rank-specifiers rank-specifier
real-literal ::= decimal-digits "." decimal-digits (exponent-part)? (real-type-suffix)? | "." decimal-digits (exponent-part)? (real-type-suffix)? | decimal-digits exponent-part (real-type-suffix)? | decimal-digits real-type-suffix
real-type-suffix ::= "F" | "f" | "D" | "d" | "M" | "m"
reference-type ::= class-type | interface-type | array-type | delegate-type
regular-string-literal ::= "%22" (regular-string-literal-characters)? "%22"
regular-string-literal-character ::= single-regular-string-literal-character | simple-escape-sequence | hexadecimal-escape-sequence | unicode-escape-sequence
regular-string-literal-characters ::= regular-string-literal-character | regular-string-literal-characters regular-string-literal-character
relational-expression ::= shift-expression | relational-expression "<" shift-expression | relational-expression ">" shift-expression | relational-expression "<=" shift-expression | relational-expression ">=" shift-expression | relational-expression "is" type | relational-expression "as" type
remove-accessor-declaration ::= (attributes)? "remove" block
resource-acquisition ::= local-variable-declaration | expression
return-statement ::= "return" (expression)? ";"
return-type ::= type | "void"
right-shift ::= ">|>"
right-shift-assignment ::= ">|>="
secondary-constraints ::= interface-type | type-parameter | secondary-constraints "," interface-type | secondary-constraints "," type-parameter
select-clause ::= "select" expression
select-or-group-clause ::= select-clause | group-clause
selection-statement ::= if-statement | switch-statement
set-accessor-declaration ::= (attributes)? (accessor-modifier)? "set" accessor-body
shift-expression ::= additive-expression | shift-expression "<<" additive-expression | shift-expression right-shift additive-expression
sign ::= "+" | "-"
simple-escape-sequence ::= "\'" | "\%22" | "\\" | "\0" | "\a" | "\b" | "\f" | "\n" | "\r" | "\t" | "\v"
simple-name ::= identifier (type-argument-list)?
simple-type ::= numeric-type | "bool"
single-character ::= <CHARACTER> /except/ ("%U0027" | "%U005C" | "%0A")
single-line-comment ::= "//" (input-characters)?
single-regular-string-literal-character ::= <CHARACTER> /except/ ("%U0027" | "%U005C" | "%0A")
single-verbatim-string-literal-character ::= <CHARACTER> /except/ ("%22")
sizeof-expression ::= "sizeof" "(" unmanaged-type ")"
skipped-characters ::= (whitespace)? not-number-sign (input-characters)?
skipped-section ::= skipped-section-part | skipped-section skipped-section-part
skipped-section-part ::= (skipped-characters)? new-line | pp-directive
specific-catch-clause ::= "catch" "(" class-type (identifier)? ")" block
specific-catch-clauses ::= specific-catch-clause | specific-catch-clauses specific-catch-clause
stackalloc-initializer ::= "stackalloc" unmanaged-type "[" expression "]"
statement ::= labeled-statement | declaration-statement | embedded-statement
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression
statement-expression-list ::= statement-expression | statement-expression-list "," statement-expression
statement-list ::= statement | statement-list statement
static-constructor-body ::= block | ";"
static-constructor-declaration ::= (attributes)? static-constructor-modifiers identifier "(" ")" static-constructor-body
static-constructor-modifiers ::= ("extern")? "static" | "static" ("extern")? | ("extern")? ("unsafe")? "static" | ("unsafe")? ("extern")? "static" | ("extern")? "static" ("unsafe")? | ("unsafe")? "static" ("extern")? | "static" ("extern")? ("unsafe")? | "static" ("unsafe")? ("extern")?
string-literal ::= regular-string-literal | verbatim-string-literal
struct-body ::= "{" (struct-member-declarations)? "}"
struct-declaration ::= (attributes)? (struct-modifiers)? ("partial")? "struct" identifier (type-parameter-list)? (struct-interfaces)? (type-parameter-constraints-clauses)? struct-body (";")?
struct-interfaces ::= ":" interface-type-list
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration | fixed-size-buffer-declaration
struct-member-declarations ::= struct-member-declaration | struct-member-declarations struct-member-declaration
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "unsafe"
struct-modifiers ::= struct-modifier | struct-modifiers struct-modifier
struct-type ::= type-name | simple-type | nullable-type
switch-block ::= "{" (switch-sections)? "}"
switch-label ::= "case" constant-expression ":" | "default" ":"
switch-labels ::= switch-label | switch-labels switch-label
switch-section ::= switch-labels statement-list
switch-sections ::= switch-section | switch-sections switch-section
switch-statement ::= "switch" "(" expression ")" switch-block
this-access ::= "this"
throw-statement ::= "throw" (expression)? ";"
token ::= identifier | keyword | integer-literal | real-literal | character-literal | string-literal | operator-or-punctuator
try-statement ::= "try" block catch-clauses | "try" block finally-clause | "try" block catch-clauses finally-clause
type ::= value-type | reference-type | type-parameter | pointer-type
type-argument ::= type
type-argument-list ::= "<" type-arguments ">"
type-arguments ::= type-argument | type-arguments "," type-argument
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration
type-name ::= namespace-or-type-name
type-parameter ::= identifier | identifier
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | primary-constraint "," secondary-constraints | primary-constraint "," constructor-constraint | secondary-constraints "," constructor-constraint | primary-constraint "," secondary-constraints "," constructor-constraint
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | type-parameter-constraints-clauses type-parameter-constraints-clause
type-parameter-list ::= "<" type-parameters ">"
type-parameters ::= (attributes)? type-parameter | type-parameters "," (attributes)? type-parameter
typeof-expression ::= "typeof" "(" type ")" | "typeof" "(" unbound-type-name ")" | "typeof" "(" "void" ")"
unary-expression ::= primary-expression | "+" unary-expression | "-" unary-expression | "!" unary-expression | "~" unary-expression | pre-increment-expression | pre-decrement-expression | cast-expression | pointer-indirection-expression | addressof-expression
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")"
unbound-type-name ::= identifier (generic-dimension-specifier)? | identifier "::" identifier (generic-dimension-specifier)? | unbound-type-name "." identifier (generic-dimension-specifier)?
unchecked-expression ::= "unchecked" "(" expression ")"
unchecked-statement ::= "unchecked" block
unicode-escape-sequence ::= "\u" hex-digit hex-digit hex-digit hex-digit | "\U" hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit hex-digit
unmanaged-type ::= type
unsafe-statement ::= "unsafe" block
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";"
using-directive ::= using-alias-directive | using-namespace-directive
using-directives ::= using-directive | using-directives using-directive
using-namespace-directive ::= "using" namespace-name ";"
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement
value-type ::= struct-type | enum-type
variable-declarator ::= identifier | identifier "=" variable-initializer
variable-declarators ::= variable-declarator | variable-declarators "," variable-declarator
variable-initializer ::= expression | array-initializer | expression | array-initializer
variable-initializer-list ::= variable-initializer | variable-initializer-list "," variable-initializer
variable-reference ::= expression
variance-annotation ::= "in" | "out"
variant-type-parameter-list ::= "<" variant-type-parameters ">"
variant-type-parameters ::= (attributes)? (variance-annotation)? type-parameter | variant-type-parameters "," (attributes)? (variance-annotation)? type-parameter
verbatim-string-literal ::= "@%22" (verbatim-string-literal-characters)? "%22"
verbatim-string-literal-character ::= single-verbatim-string-literal-character | quote-escape-sequence
verbatim-string-literal-characters ::= verbatim-string-literal-character | verbatim-string-literal-characters verbatim-string-literal-character
warning-action ::= "disable" | "restore"
warning-list ::= decimal-digits | warning-list (whitespace)? "," (whitespace)? decimal-digits
where-clause ::= "where" boolean-expression
while-statement ::= "while" "(" boolean-expression ")" embedded-statement
whitespace ::= [uc:Zs] | "%09" | "%0B" | "%0C"
yield-statement ::= "yield" "return" expression ";" | "yield" "break" ";"
