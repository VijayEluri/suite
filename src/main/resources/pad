-------------------------------------------------------------------------------
-- format check

define-signature .sign :- signature-prototype .sign .sign #

check-types () _ #
check-types (.rule # .remains) .signs
	:- check-rule-types .head .tail .signs
	, check-types .remains .signs
#

check-rule-types .rule .signs
	:- decompose-rule .rule .head .tail
	, call-prototype .head .proto
	, member .signs .proto/.sign
	, is-type .head .signs
	, check-predicate-types .tail
#

check-predicate-types (.c1, .c2) .vt
	:- check-predicate-types .c1 .vt
	, check-predicate-types .c2 .vt
#
check-predicate-types (.c1; .c2) .vt
	:- check-predicate-types .c1 .vt
	, check-predicate-types .c2 .vt
#
check-predicate-types (.c1 = .c2)
:- is-type .type .c1 .vt, is-type .type .c2 .vt
#
check-predicate-types .cut :- to.atom "!" .cut #

is-type .v .type .vt :- is-variable .v, map .v/.type #
is-type _ %any _ #
is-type .i %integer _ :- is.int .i #
is-type .s %string _ :- is.string .s #
is-type .e (.type | _) _ :- is-type .type .e #
is-type .e (_ | .tail) _ :- is-type .tail .e #
is-type (.head, .tail) (%list .type) _
	:- is-type .type .head
	, is-type (%list .type) .tail
#
is-type .tree %op/.operator/.leftType/.rightType _
	:- tree .tree .left .operator .right
	, is-type .left .leftType
	, is-type .right .rightType
#
is-type .a .a _ :- is.atom .a, not (starts.with .a '%') #

decompose-rule (.head :- .tail) .head .tail :- ! #
decompose-rule .head .head () #

call-prototype (.name .ps) .name/.n :- params-length .ps .n, ! #
call-prototype .name .name #

params-length .ps .n
	:- if (bound .ps, .ps = _ .ps1) then (
		params-length .ps1 .n1, sum .n 1 .n1
	) else-if (1 < .n, .ps = _ .ps1) then (
		sum .n 1 .n1, params-length .ps1 .n1
	) else (
		(not (bound .ps); .ps != _ _), .n = 1
	)
#

is-variable .variable
	:- is.atom .variable, to.atom "." .dot, starts.with .variable .dot
#

map (.k/.v1, _) .k/.v2 :- !, .v1 = .v2 #
map (_, .tail) .e :- map .tail .e #
